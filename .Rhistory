runApp('R/Training/Successful_MC')
runApp('R/Training/Successful_MC/STOIIP')
runApp('R/Training/Successful_MC/STOIIP')
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
install_github('rCharts', 'ramnathv')
library(devtools)
install_github('rChart', 'ramnathv')
install_github('rChart', 'ramnathv/rChart')
dTable <- dataTable <- function(x, ...){
myTable <- Datatables$new()
myTable$addTable( x, ... )
return(myTable$copy())
}
Datatables = setRefClass('Datatables', contains = 'rCharts', methods = list(
initialize = function(x){
callSuper()
container <<- 'table'
},
addTable = function(x, ...){
params$table <<- modifyList(make_table2(x), list(...))
},
getPayload = function(chartId){
list(chartParams = toJSON2(params), chartId = chartId, lib = basename(lib))
}
))
make_table <- function(df){
nms = names(df)
nms = setNames(nms, rep('sTitle', length(nms)))
l = apply(setNames(df, NULL), 1, as.list)
names(l) = NULL
list(aaData = l, aoColumns = nms)
}
make_table2 <- function(df_){
nms = names(df_)
nms = lapply(nms, function(nm){
list(sTitle = nm)
})
list(
aaData = toJSONArray2(df_, json = F, names = F),
aoColumns = as.list(nms)
)
}
dTable <- dataTable <- function(x, ...){
myTable <- Datatables$new()
myTable$addTable( x, ... )
return(myTable$copy())
}
library(rCharts)
install.packages("rCharts")
rmarkdown::render_site()
setwd("~/GitHub/marktest.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
library(shiny); runApp('~/R/Monte carlo example app.R')
install.packages("ggplot2")
install.packages("leaflet")
library(leaflet)
leaflet() %>%
addTiles() %>%
addCircles(lng=33.35, lat=28.3, radius= 300000 ,color = "red" ,popup="Midetrenean Sea Basin") %>%
addCircles(lng=-98.2, lat=22.3, radius= 300000 ,color = "red" ,popup="Midetrenean Sea Basin") %>%
addCircles(lng=-93.0, lat=18.0, radius= 300000 ,color = "red" ,popup="Midetrenean Sea Basin") %>%
addCircles(lng=-93.2, lat=18.2, radius= 300000 ,color = "red" ,popup="Midetrenean Sea Basin") %>%
addCircles(lng=-93.4, lat=18.4, radius= 300000 ,color = "red" ,popup="Midetrenean Sea Basin") %>%
addCircles(lng=-93.6, lat=18.6, radius= 300000 ,color = "red" ,popup="Midetrenean Sea Basin") %>%
addCircles(lng=-93.8, lat=18.8, radius= 300000 ,color = "red" ,popup="Midetrenean Sea Basin")
runApp('~/R/Monte carlo example app.R')
Pi <- 1000
Duration <- 10
DR <- 0.02
for (i in Duration) {
Pi = Pi- (Pi*DR)}
Print(paste(Pi,i))
Pi <- 1000
Duration <- 10
DR <- 0.02
for (i in Duration) {
Pi = Pi- (Pi*DR)}
print(paste(Pi,i))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
Pi <- 1000
Duration <- 10
DR <- 0.02
for (i in Duration) {
Pi = Pi- (Pi*DR)
print(paste(Pi,i))
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
Duration <- C(1:10)
Duration = C(1:10)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("flexdashboard")
rmarkdown::render_site()
setwd("~/GitHub/marktest.github.io")
rmarkdown::render_site()
setwd("~/GitHub/marktest.github.io")
getwd()
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("plotly")
install.packages("plotly")
